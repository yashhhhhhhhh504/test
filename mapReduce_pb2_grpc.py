# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mapReduce_pb2 as mapReduce__pb2


class MasterAndMapperStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.mapRequest = channel.unary_unary(
                '/MasterAndMapper/mapRequest',
                request_serializer=mapReduce__pb2.mapData.SerializeToString,
                response_deserializer=mapReduce__pb2.status.FromString,
                )


class MasterAndMapperServicer(object):
    """Missing associated documentation comment in .proto file."""

    def mapRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterAndMapperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'mapRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.mapRequest,
                    request_deserializer=mapReduce__pb2.mapData.FromString,
                    response_serializer=mapReduce__pb2.status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MasterAndMapper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterAndMapper(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def mapRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterAndMapper/mapRequest',
            mapReduce__pb2.mapData.SerializeToString,
            mapReduce__pb2.status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MasterAndReducerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.reduceRequest = channel.unary_unary(
                '/MasterAndReducer/reduceRequest',
                request_serializer=mapReduce__pb2.reduceData.SerializeToString,
                response_deserializer=mapReduce__pb2.ReduceResp.FromString,
                )


class MasterAndReducerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def reduceRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterAndReducerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'reduceRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.reduceRequest,
                    request_deserializer=mapReduce__pb2.reduceData.FromString,
                    response_serializer=mapReduce__pb2.ReduceResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MasterAndReducer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterAndReducer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def reduceRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterAndReducer/reduceRequest',
            mapReduce__pb2.reduceData.SerializeToString,
            mapReduce__pb2.ReduceResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MapperAndReducerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getPairs = channel.unary_unary(
                '/MapperAndReducer/getPairs',
                request_serializer=mapReduce__pb2.Identity.SerializeToString,
                response_deserializer=mapReduce__pb2.Pairs.FromString,
                )


class MapperAndReducerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getPairs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperAndReducerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getPairs': grpc.unary_unary_rpc_method_handler(
                    servicer.getPairs,
                    request_deserializer=mapReduce__pb2.Identity.FromString,
                    response_serializer=mapReduce__pb2.Pairs.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MapperAndReducer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapperAndReducer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getPairs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapperAndReducer/getPairs',
            mapReduce__pb2.Identity.SerializeToString,
            mapReduce__pb2.Pairs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
